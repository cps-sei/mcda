//a correct synchronous collision avoidance protocol
MOC_SYNC;

TRACK_LOCATIONS

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include "madara/utility/Utility.h"

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}

const int DROP_RADIUS = 8;
const int NEIGHBOR_RADIUS = 5;

Madara::Knowledge_Record
distance_drop_policy (Madara::Knowledge_Map & records,
                      const Madara::Transport::Transport_Context & context,
                      Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused

  // Get coordinates of this node
  Integer my_x = x[*id];
  Integer my_y = y[*id];
  Integer my_z = z[*id];

  // Get coordinates of sender node
  Integer sender_id = records["id"].to_integer();
  Integer sender_x = x[sender_id];
  Integer sender_y = y[sender_id];
  Integer sender_z = z[sender_id];

  Integer dx = my_x - sender_x;
  Integer dy = my_y - sender_y;
  Integer dz = my_z - sender_z;

  double dr = sqrt(dx * dx + dy * dy + dz * dz);

  if (dr > DROP_RADIUS) {
    // Discard incoming packets
    records.clear();
  }

  return result; // empty record
}


Madara::Knowledge_Record
heartbeat_filter (Madara::Knowledge_Map & records,
                      const Madara::Transport::Transport_Context & context,
                      Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused

  Integer sender_id = records["id"].to_integer();
  heartbeats.set (sender_id, 1);

  return result; // empty record
}

Madara::Knowledge_Record
handle_pre_round_barrier_timeout (Madara::Knowledge_Engine::Function_Arguments & args,
                        Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused
  return result; // empty record
}

Madara::Knowledge_Record
handle_post_round_barrier_timeout (Madara::Knowledge_Engine::Function_Arguments & args,
                        Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused
  return result; // empty record
}
%%}
/*
ON_PRE_ROUND_BARRIER_TIMEOUT(handle_pre_round_barrier_timeout);
ON_POST_ROUND_BARRIER_TIMEOUT(handle_post_round_barrier_timeout);
ON_RECEIVE_FILTER(distance_drop_policy);
*/
//number of X and Y coordinates
CONST X = 10;
CONST Y = 10;

//states of each node
CONST INITS = 0;
CONST NEXT = 1;
CONST REQUEST = 2;
CONST WAITING = 3;
CONST MOVE = 4;

EXTERN int MOVE_TO(unsigned char x,unsigned char y);
EXTERN int my_sleep(int seconds);
EXTERN void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf);

NODE uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  GLOBAL _Bool lock [X][Y][#N];

  //private variables -- local to the node.
  //preserved across rounds
  LOCAL unsigned char state; //the state
  LOCAL unsigned char xp,yp; //next coordinates
  LOCAL unsigned char xf,yf; //final coordinates
  
  void NEXT_XY () {
    ATOMIC {
      xp = x[id]; yp = y[id];
      if(x[id] < xf) xp = x[id] + 1;
      else if(x[id] > xf) xp = x[id] - 1;
      else if(y[id] < yf) yp = y[id] + 1;
      else yp = y[id] - 1;
    }
  }

  void ROUND () {
    print_state(X,Y,id,x[id],y[id],xf,yf);
    //my_sleep(1);
    if(state == INITS) {
      lock[x[id]][y[id]][id] = 1;
      state = NEXT;
    } if(state == NEXT) {
      //compute next point on route
      if(x[id] == xf && y[id] == yf) return;
      NEXT_XY();
      state = REQUEST;
    } else if(state == REQUEST) {
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp][idp] != 0)) return;
      lock[xp][yp][id] = 1;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp][idp] != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(MOVE_TO(xp,yp)) return;
      lock[x[id]][y[id]][id] = 0;
      x[id] = xp; y[id] = yp;
      state = NEXT;
    }
  }
}

//program has two nodes with ids 0 and 1
//PROGRAM = uav (0) || uav (1);

//program has four nodes with ids 0, 1, 2, and 3
PROGRAM = uav (0) || uav (1) || uav (2) || uav (3);

//initial state
void INIT () 
{
  ATOMIC {
    FORALL_NODE(id) {
      state.id = INITS;
      ND(x.id); ND(y.id);
      ASSUME(0 <= x.id && x.id < X && 0 <= y.id && y.id < Y);
      ND(xf.id); ND(yf.id);
      ASSUME(0 <= xf.id && xf.id < X && 0 <= yf.id && yf.id < Y);
    }
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x.id1 != x.id2 || y.id1 != y.id2);
  }
}

//the safety property checked at the beginning of each round
void SAFETY ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x.id1 != x.id2 || y.id1 != y.id2);
  }
}
