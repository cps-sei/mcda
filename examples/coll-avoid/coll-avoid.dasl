//a correct synchronous collision avoidance protocol
MOC_SYNC;

TRACK_LOCATIONS;

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include <boost/lexical_cast.hpp>
#include "madara/utility/Utility.h"

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}

void print_global_state()
{
  for (int i = 0; i < 150; ++i)
    printf("\n");

  printf("round = %d : id = %d\n", ++round, (int) *id);
  printf("_X = %d _Y = %d\n", X, Y);
  print_line(X);

  for (int i = 0; i < Y; ++i) {
    printf("|");

    for (int j = 0; j < X; ++j) {
      bool taken = false;

      for (int k = 0; k < processes; ++k) {
        if (j == x[k] && i == y[k]) {
          printf("%d|", k);
          taken = true;
          break;
        }
      }

      if (!taken) {
        if (j == *xf && i == *yf)
          printf("o|");
        else printf(" |");
      }
    }
    printf("\n");
    print_line(X);
  }
}

bool DO_RAND(double prob)
{
  return rand() < (RAND_MAX * prob);
}

const int DROP_RADIUS = 5;

Madara::Knowledge_Record
distance_drop (Madara::Knowledge_Map & incoming_records,
               const Madara::Transport::Transport_Context & context,
               Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused

  printf("Incoming records:\n");
  for (Madara::Knowledge_Map::iterator it = incoming_records.begin();
       it != incoming_records.end();
       ++it) {
    std::cout << it->first << "\n";
  }
  /*
  // Get coordinates of this node
  Integer my_x = x[*id];
  Integer my_y = y[*id];

  // Get coordinates of sender node
  Integer sender_id = incoming_records["id"].to_integer();
  std::string sender_x_key = "x." + boost::lexical_cast<std::string>(sender_id);
  std::string sender_y_key = "y." + boost::lexical_cast<std::string>(sender_id);
  Madara::Knowledge_Map::iterator it = incoming_records.find(sender_x_key);

  // Check if incoming records contain global updates
  if (it != incoming_records.end()) {
    Integer sender_x = it->second.to_integer();

    // Assert that incoming records also contain barrier update
    std::string barrier_key = "mbarrier." + boost::lexical_cast<std::string>(sender_id);
    it = incoming_records.find(barrier_key);
    assert (it != incoming_records.end());

    // Assume that x.{id} and y.{id} are always broadcasted together
    Integer sender_y = incoming_records[sender_y_key].to_integer();

    Integer dx = my_x - sender_x;
    Integer dy = my_y - sender_y;

    double dr = sqrt(dx * dx + dy * dy);

    if (dr > DROP_RADIUS) {
      // Discard both global and barrier updates
      incoming_records.clear();
    } else {
      // Record round of receiving global updates
      last_global_updates_round.set (sender_id, *round_count);
    }
  }
  */
  return result; // empty record
}

const int LEVEL_1_RADIUS = 3;
const int LEVEL_2_RADIUS = 5;
const int LEVEL_3_RADIUS = 9;
const double LEVEL_1_DROP_RATE = 0.05;
const double LEVEL_2_DROP_RATE = 0.2;
const double LEVEL_3_DROP_RATE = 0.5;
const double LEVEL_4_DROP_RATE = 0.7;

Madara::Knowledge_Record
prob_distance_drop (Madara::Knowledge_Map & incoming_records,
                    const Madara::Transport::Transport_Context & context,
                    Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused

  // Get coordinates of this node
  Integer my_x = x[*id];
  Integer my_y = y[*id];

  // Get coordinates of sender node
  Integer sender_id = incoming_records["id"].to_integer();
  const std::string sender_x_key = "x." + boost::lexical_cast<std::string>(sender_id);
  const std::string sender_y_key = "y." + boost::lexical_cast<std::string>(sender_id);
  Integer sender_x = vars.get(sender_x_key).to_integer();
  Integer sender_y = vars.get(sender_y_key).to_integer();

  Integer dx = my_x - sender_x;
  Integer dy = my_y - sender_y;

  double dr = sqrt(dx * dx + dy * dy);

  if (dr <= LEVEL_1_RADIUS && DO_RAND(LEVEL_1_DROP_RATE)) {
    incoming_records.clear();
  } else if (dr <= LEVEL_2_RADIUS && DO_RAND(LEVEL_2_DROP_RATE)) {
    incoming_records.clear();
  } else if (dr <= LEVEL_3_RADIUS && DO_RAND(LEVEL_3_DROP_RATE)) {
    incoming_records.clear();
  } else if (DO_RAND(LEVEL_4_DROP_RATE)) {
    incoming_records.clear();
  }

  return result; // empty record
}
%%}

ON_RECEIVE_FILTER(distance_drop);

//number of X and Y coordinates
CONST X = 10;
CONST Y = 10;

//states of each node
CONST INITS = 0;
CONST NEXT = 1;
CONST REQUEST = 2;
CONST WAITING = 3;
CONST MOVE = 4;

CONST CRITICAL_RADIUS = 2;

EXTERN int MOVE_TO(unsigned char x,unsigned char y);
EXTERN int my_sleep(int seconds);
EXTERN void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf);
EXTERN void print_global_state();

NODE uav (id)
{
  //shared variables -- visible across nodes. 
  //must be accessed via R() and W()
  GLOBAL _Bool lock [X][Y][#N];

  // Velocity in unit/round
  GLOBAL double velocity_x [#N];
  GLOBAL double velocity_y [#N];

  //private variables -- local to the node.
  //preserved across rounds
  LOCAL unsigned char state; //the state
  LOCAL unsigned char xp,yp; //next coordinates
  LOCAL unsigned char xf,yf; //final coordinates

  // To calculate velocity
  LOCAL int prev_x, prev_y;
  // Whether (xp, yp) is in critical area
  LOCAL int in_critical_area;

  void NODE_INIT () {
    velocity_x[id] = NAN;
    velocity_y[id] = NAN;
    prev_x = x[id];
    prev_y = y[id];
  }

  @PERIODIC (10)
  void CALCULATE_VELOCITY () {
    // Calculate velocity in unit/round
    double dx, dy;
    double vx, vy;
    dx = x[id] - prev_x;
    dy = y[id] - prev_y;
    vx = dx / PERIOD;
    vy = dy / PERIOD;
    velocity_x[id] = vx;
    velocity_y[id] = vy;

    prev_x = x[id];
    prev_y = y[id];
  }

  void NEXT_XY () {
    ATOMIC {
      xp = x[id]; yp = y[id];
      if(x[id] < xf) xp = x[id] + 1;
      else if(x[id] > xf) xp = x[id] - 1;
      else if(y[id] < yf) yp = y[id] + 1;
      else yp = y[id] - 1;
    }
  }

  void CHECK_CRITICAL_AREA () {
    int last_known_xi, last_known_yi;
    int lgu_round;
    int dround;
    double approx_xi, approx_yi;
    int ri; // critical radius
    double dxi, dyi;
    double dx, dy, dr;

    FORALL_OTHER (i) {
      lgu_round = last_global_updates_round[i];
      if (lgu_round == -1) {
        // Never received global updates from node i
        // Assume node i is far away
        continue;
      }

      // Number of rounds passed since last global updates from node i
      dround = round_count - lgu_round;
      if (dround <= 1) {
        // We received updates in the previous round
        continue;
      }

      // Last known location of node i
      last_known_xi = x[i];
      last_known_yi = y[i];

      if (isnan(velocity_x[i])) {
        // No last known velocity
        // Use last known location, but critical radius depends on how many rounds have passed
        approx_xi = last_known_xi;
        approx_yi = last_known_yi;
        ri = dround;
      } else {
        // Approximate current location of node i
        // Use default critical radius
        dxi = velocity_x[i] * dround;
        dyi = velocity_y[i] * dround;
        approx_xi = last_known_xi + dxi;
        approx_yi = last_known_yi + dyi;
        ri = CRITICAL_RADIUS;
      }

      // Check if (xp, yp) is in critical area of node i
      dx = xp - approx_xi;
      dy = yp - approx_yi;
      dr = sqrt(dx * dx + dy * dy);

      if (dr < ri)
      {
        // (xp, yp) in critical area of node i
        in_critical_area = 1;
        return;
      }
    }

    // (xp, yp) not in critical area of any other node
    in_critical_area = 0;
  }

  void ROUND () {
    //print_state(X,Y,id,x[id],y[id],xf,yf);
    print_global_state();
    //my_sleep(1);
    if(state == INITS) {
      lock[x[id]][y[id]][id] = 1;
      state = NEXT;
    } if(state == NEXT) {
      //compute next point on route
      if(x[id] == xf && y[id] == yf) {
        return;
      }
      NEXT_XY();
      state = REQUEST;
    } else if(state == REQUEST) {
      // Check if (x',y') is in critical areas of timed out nodes
      CHECK_CRITICAL_AREA();
      if (in_critical_area) {
        // (x',y') in critical area, do not grab lock
        return;
      }
      //request the lock but only if it is free
      if(EXISTS_LOWER(idp,lock[xp][yp][idp] != 0)) return;
      lock[xp][yp][id] = 1;
      state = WAITING;
    } else if(state == WAITING) {
      //grab the lock if we are the highest 
      //id node to request or hold the lock
      if(EXISTS_HIGHER(idp, lock[xp][yp][idp] != 0)) return;
      state = MOVE;
    } else if(state == MOVE) {
      //now we have the lock on (x’,y’)
      if(MOVE_TO(xp,yp)) return;
      lock[x[id]][y[id]][id] = 0;
      x[id] = xp; y[id] = yp;
      state = NEXT;
    }
  }
}

//program has two nodes with ids 0 and 1
//PROGRAM = uav (0) || uav (1);

//program has four nodes with ids 0, 1, 2, and 3
PROGRAM = uav (0) || uav (1) || uav (2) || uav (3);

//initial state
void INIT () 
{
  ATOMIC {
    FORALL_NODE(id) {
      state.id = INITS;
      ND(x.id); ND(y.id);
      ASSUME(0 <= x.id && x.id < X && 0 <= y.id && y.id < Y);
      ND(xf.id); ND(yf.id);
      ASSUME(0 <= xf.id && xf.id < X && 0 <= yf.id && yf.id < Y);
    }
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x.id1 != x.id2 || y.id1 != y.id2);
  }
}

//the safety property checked at the beginning of each round
void SAFETY ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x.id1 != x.id2 || y.id1 != y.id2);
  }
}
