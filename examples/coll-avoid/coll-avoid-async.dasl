// asynchronous collision avoidance protocol
MOC_ASYNC;

TARGET GNU_CPP,WIN_CPP %%{
#define GNU_WIN
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include <boost/lexical_cast.hpp>
#include "madara/utility/Utility.h"


int GO_APPROACH ()
{
  return rand () < (RAND_MAX / 2);
}

int MOVE_TO(unsigned char x,unsigned char y)
{
  return rand() < (RAND_MAX / 10 * 6);
}

int my_sleep (int seconds)
{
  Madara::Utility::sleep (seconds);
  return 0;
}

int round = 0;
int xi,yi;
bool node_finished = false;

void print_line(int _X)
{
  printf("-");
  for(int i = 0;i < _X;++i) printf("--");
  printf("\n");
}

void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf)
{
  if(round == 0) {
    xi = x; yi = y;
  }

  for(int i = 0;i < 150;++i) printf("\n");
  
  printf("round = %d : id = %d\n", ++round, id);
  printf("_X = %d _Y = %d\n",_X,_Y);
  print_line(_X);
  for(int i = 0;i < _Y;++i) {
    printf("|");
    for(int j = 0;j < _X;++j) {
      //printf("i = %d j = %d\n", i, j);
      if(j == xf && i == yf) printf("o|");        
      else if(j == x && i == y) printf("%d|",id);
      else printf(" |");
    }
    printf("\n");
    print_line(_X);
  }
}

void print_global_state(int local_state)
{
  for (int i = 0; i < 150; ++i)
    printf("\n");

  printf("round = %d : id = %d : state = %d\n", ++round, (int) *id, local_state);
  printf("_X = %d _Y = %d\n", X, Y);
  print_line(X);

  for (int i = 0; i < Y; ++i) {
    printf("|");

    for (int j = 0; j < X; ++j) {
      bool taken = false;

      for (int k = 0; k < processes; ++k) {
        if (j == true_x[k] && i == true_y[k]) {
          printf("%d|", k);
          taken = true;
          break;
        }
      }

      if (!taken) {
        if (j == *xf && i == *yf)
          printf("o|");
        else printf(" |");
      }
    }
    printf("\n");
    print_line(X);
  }
}

const int DROP_RADIUS = 5;

Madara::Knowledge_Record
simple_distance_drop (Madara::Knowledge_Map & incoming_records,
                      const Madara::Transport::Transport_Context & context,
                      Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused

  // Get coordinates of this node
  Integer my_x = x[*id];
  Integer my_y = y[*id];

  // Get coordinates of sender node
  Integer sender_id = incoming_records["id"].to_integer();
  std::string sender_x_key = "x." + boost::lexical_cast<std::string>(sender_id);
  std::string sender_y_key = "y." + boost::lexical_cast<std::string>(sender_id);
  Madara::Knowledge_Map::iterator it = incoming_records.find(sender_x_key);

  // Check if incoming records contain global updates
  if (it != incoming_records.end()) {
    Integer sender_x = it->second.to_integer();
    // Assume that x.{id} and y.{id} are always broadcasted together
    Integer sender_y = incoming_records[sender_y_key].to_integer();

    Integer dx = my_x - sender_x;
    Integer dy = my_y - sender_y;

    double dr = sqrt(dx * dx + dy * dy);

    if (dr > DROP_RADIUS) {
      // Discard both global and barrier updates

      // Preserved variables for collision checking
      std::string true_x = "true_x." + boost::lexical_cast<std::string>(sender_id);
      std::string true_y = "true_y." + boost::lexical_cast<std::string>(sender_id);

      Madara::Knowledge_Map::iterator it2 = incoming_records.begin();
      while (it2 != incoming_records.end()) {
        std::string var = it2->first;
        if (var == true_x || var == true_y) {
          it2++;
        } else {
          Madara::Knowledge_Map::iterator it3 = it2;
          it2++;
          // Discard both global and barrier updates
          incoming_records.erase(it3);
        }
      }

      // Since we use filter to simulate packet drop,
      // set send_global_updates flag to false so that set_heartbeat filter
      // will not record last global updates round
      incoming_records["send_global_updates"] = Integer(0);
    }
  }

  return result; // empty record
}

const int RADIUS_LEVEL_1 = 4;
const int RADIUS_LEVEL_2 = 6;
const int RADIUS_LEVEL_3 = 10;
const double DROP_PROB_LEVEL_1 = 0.6;
const double DROP_PROB_LEVEL_2 = 0.6;
const double DROP_PROB_LEVEL_3 = 0.6;
const double DROP_PROB_LEVEL_4 = 0.6;

bool flip (double prob)
{
  return rand() < (RAND_MAX * prob);
}

Madara::Knowledge_Record
prob_distance_drop (Madara::Knowledge_Map & incoming_records,
                    const Madara::Transport::Transport_Context & context,
                    Madara::Knowledge_Engine::Variables & vars)
{
  Madara::Knowledge_Record result; // unused

  // Get coordinates of this node
  Integer my_x = x[*id];
  Integer my_y = y[*id];

  // Get coordinates of sender node
  Integer sender_id = incoming_records["id"].to_integer();
  std::string sender_x_key = "x." + boost::lexical_cast<std::string>(sender_id);
  std::string sender_y_key = "y." + boost::lexical_cast<std::string>(sender_id);
  Madara::Knowledge_Map::iterator it = incoming_records.find(sender_x_key);

  // Check if incoming records contain global updates
  if (it != incoming_records.end()) {
    Integer sender_x = it->second.to_integer();
    // Assume that x.{id} and y.{id} are always broadcasted together
    Integer sender_y = incoming_records[sender_y_key].to_integer();

    Integer dx = my_x - sender_x;
    Integer dy = my_y - sender_y;

    double dr = sqrt(dx * dx + dy * dy);

    if ((dr > RADIUS_LEVEL_3 && flip(DROP_PROB_LEVEL_4)) ||
        (dr <= RADIUS_LEVEL_3 && dr > RADIUS_LEVEL_2 && flip(DROP_PROB_LEVEL_3)) ||
        (dr <= RADIUS_LEVEL_2 && dr > RADIUS_LEVEL_1 && flip(DROP_PROB_LEVEL_2)) ||
        (dr <= RADIUS_LEVEL_1 && flip(DROP_PROB_LEVEL_1)))
    {
      // Discard both global and barrier updates

      // Preserved variables for collision checking
      std::string true_x = "true_x." + boost::lexical_cast<std::string>(sender_id);
      std::string true_y = "true_y." + boost::lexical_cast<std::string>(sender_id);
      std::string done = "done." + boost::lexical_cast<std::string>(sender_id);

      Madara::Knowledge_Map::iterator it2 = incoming_records.begin();
      while (it2 != incoming_records.end()) {
        std::string var = it2->first;
        if (var == true_x || var == true_y || var == done) {
          it2++;
        } else {
          Madara::Knowledge_Map::iterator it3 = it2;
          it2++;
          // Discard both global and barrier updates
          incoming_records.erase(it3);
        }
      }

      // Since we use filter to simulate packet drop,
      // set send_global_updates flag to false so that set_heartbeat filter
      // will not record last global updates round
      incoming_records["send_global_updates"] = Integer(0);
    }
  }

  return result; // empty record
}

//do some basic initialization at the start of the node
void basic_node_init()
{
  srand(getpid());
}
%%}

//directives
@SEND_HEARTBEATS;
@TRACK_LOCATIONS;
@ON_RECEIVE_FILTER(prob_distance_drop);
@PERIODIC(2000);

//number of X and Y coordinates
CONST X = 20;
CONST Y = 20;

// Node states
CONST INITS = 0;
CONST CHECK_MOVE = 1;
CONST NEXT = 2;
CONST FINISHED = 3;
CONST COLLIDED = 4;
CONST FINISHED_AND_COLLIDED = 5;

CONST TCL_LENGTH = 3;

EXTERN int my_sleep(int seconds);
EXTERN void print_state(int _X,int _Y,int id, int x, int y, int xf, int yf);
EXTERN void print_global_state(int local_state);
EXTERN void basic_node_init();
EXTERN int abs(int x);

NODE uav (id)
{
  // Current x-y coordinates of each node
  GLOBAL int x [#N];
  GLOBAL int y [#N];

  // Trajectory Cells List (TCL) of each node
  // 1st element is current location
  GLOBAL int x_TCLs [TCL_LENGTH][#N];
  GLOBAL int y_TCLs [TCL_LENGTH][#N];

  // Velocity of each node in unit/round
  GLOBAL double velocity_x [#N];
  GLOBAL double velocity_y [#N];

  GLOBAL _Bool done [#N];

  // Final x-y coordinates
  LOCAL int xf;
  LOCAL int yf;

  // Helper variables for calculating velocity
  LOCAL int prev_x, prev_y;

  // Local state
  LOCAL int state;

  LOCAL int num_rounds;

  void NODE_INIT () {
    basic_node_init(); //do basic initialization

    velocity_x[id] = NAN;
    velocity_y[id] = NAN;
    prev_x = x[id];
    prev_y = y[id];
    done[id] = 0;
    // Note: round_count is initialized to 0
    num_rounds = round_count;
  }

  void COMPUTE_TCL () {
    int i; // for-loop variable

    // Fill in 1st element in TCL (current x,y)
    x_TCLs[0][id] = x[id];
    y_TCLs[0][id] = y[id];

    for (i = 1; i < TCL_LENGTH; i = i + 1) {
      NEXT_XY(i);
    }
  }

  void UPDATE_TCL () {
    int i; // for-loop variable

    // Shift current elements in TCL to the left
    for (i = 0; i < TCL_LENGTH - 1; i = i + 1) {
      x_TCLs[i][id] = x_TCLs[i + 1][id];
      y_TCLs[i][id] = y_TCLs[i + 1][id];
    }

    NEXT_XY(TCL_LENGTH - 1);
  }

  void NEXT_XY (int TCL_index) {
    int prev_x, prev_y, next_x, next_y;

    prev_x = x_TCLs[TCL_index - 1][id];
    prev_y = y_TCLs[TCL_index - 1][id];
    next_x = prev_x;
    next_y = prev_y;

    // Find next point
    if (xf > prev_x) {
      next_x = next_x + 1;
    } else if (xf < prev_x) {
      next_x = next_x - 1;
    } else if (yf > prev_y) {
      next_y = prev_y + 1;
    } else if (yf < prev_y) {
      next_y = prev_y - 1;
    } else {
      next_x = -1;
      next_y = -1;
    }

    // Fill TCL_index with next point
    x_TCLs[TCL_index][id] = next_x;
    y_TCLs[TCL_index][id] = next_y;
  }

  int CDAI (int other) {
    int i, j; // for-loop variables

    for (i = 0; i < TCL_LENGTH; i = i + 1) {
      for (j = 0; j < TCL_LENGTH; j = j + 1) {
        if (x_TCLs[i][id] != -1 && x_TCLs[i][id] == x_TCLs[j][other]
            && y_TCLs[i][id] == y_TCLs[j][other]) {
          // Index of the TIC in this node's TCL
          return i;
        }
      }
    }
    // No TIC
    return -1;
  }

  int MANHATTAN_DISTANCE (int xi, int yi, int xj, int yj) {
    return abs(xi - xj) + abs(yi - yj);
  }

  void ROUND () {
    int first_TIC_index; // 1st TIC in this node's TCL
    int other; // 1st potentially colliding node
    int TIC_index; // TIC for each other node
    int d1, d2;

    //print_global_state(state);

    if (done[id] == 0) {
      // Not at destination and not collided
      // Continue to count rounds
      // Note: round_count gets incremented before each ROUND()
      num_rounds = round_count;
    }

    if (state == INITS) {
      COMPUTE_TCL();
      state = CHECK_MOVE;
    } else if (state == CHECK_MOVE) {
      first_TIC_index = TCL_LENGTH;
      other = -1;

      // Check for TIC
      FORALL_OTHER (i) {
        TIC_index = CDAI(i);

        if (TIC_index < first_TIC_index) {
          first_TIC_index = TIC_index;
          other = i;
        }
      }

      // If first_TIC_index == 0,
      // this node has highest priority

      if (first_TIC_index == 1) {
        // Priority policy:
        // - distance to TIC (closer -> higher priority)
        // - node id (lower id -> higher priority)
        d1 = MANHATTAN_DISTANCE(x[id], y[id], x_TCLs[first_TIC_index][id], y_TCLs[first_TIC_index][id]);
        d2 = MANHATTAN_DISTANCE(x[other], y[other], x_TCLs[first_TIC_index][id], y_TCLs[first_TIC_index][id]);

        if (d2 < d1 || (d2 == d1 && other < id)) {
          // Other node has higher priority
          // This node cannot move to next point yet
          return;
        }
      }

      // One of the following:
      // - no TIC
      // - next point is not TIC
      // - next point is TIC, but this node has higher priority
      // Move to next point in TCL
      x[id] = x_TCLs[1][id];
      y[id] = y_TCLs[1][id];
      state = NEXT;
    } else if (state == NEXT) {
      UPDATE_TCL();
      state = CHECK_MOVE;
    }
  }

  // Check safety property
  @ONCE_EVERY (1)
  void NODE_ASSERT () {
    FORALL_OTHER (i) {
      LOCAL_ASSERT (true_x[i] != x[id] || true_y[i] != y[id]);
    }
  }

  @ONCE_EVERY (10)
  void LOG_STATUS () {
    int data [4];
    data[0] = state;
    data[1] = x[id];
    data[2] = y[id];
    data[3] = num_rounds;
    LOG(data);
  }

  @ONCE_EVERY (1)
  void CHECK () {
    CHECK_COLLISION();
    CHECK_ALL_DONE();
  }

  // Check if this node collides with other node
  // if so, update state
  void CHECK_COLLISION () {
    if (EXISTS_OTHER (i, true_x[i] == x[id] && true_y[i] == y[id])) {
      if (state == FINISHED) {
        // Node already finished (i.e., at destination), but other node collides with it
        state = FINISHED_AND_COLLIDED;
      } else {
        state = COLLIDED;
      }
      done[id] = 1;
    }
  }

  // Check if all nodes are done, i.e., either finished or collided
  // if so, terminate this node
  void CHECK_ALL_DONE () {
    if (!EXISTS_ANY (i, done[i] == 0)) {
      // All nodes have finished or collided
      EXIT;
    }
  }

}

//program has two nodes with ids 0 and 1
//PROGRAM = uav (0) || uav (1);

//program has four nodes with ids 0, 1, 2, and 3
PROGRAM = uav (0) || uav (1) || uav (2) || uav (3);

//initial state
void INIT () 
{
  ATOMIC {
    FORALL_NODE(id) {
      state.id = INITS;
      ND(x.id); ND(y.id);
      ASSUME(0 <= x.id && x.id < X && 0 <= y.id && y.id < Y);
      ND(xf.id); ND(yf.id);
      ASSUME(0 <= xf.id && xf.id < X && 0 <= yf.id && yf.id < Y);
    }
  }

  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSUME(x.id1 != x.id2 || y.id1 != y.id2);
  }
}

//the safety property checked at the beginning of each round
void SAFETY ()
{
  FORALL_DISTINCT_NODE_PAIR (id1,id2) {
    ASSERT(x.id1 != x.id2 || y.id1 != y.id2);
  }
}
